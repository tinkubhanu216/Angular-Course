0
1
00:00:02,710 --> 00:00:10,060
Welcome back. In the previous step, we looked at a quick review of the types of data bindings that we have
1

2
00:00:10,060 --> 00:00:14,950
used, and you know there are other kinds of data binding which we were talking about a little later. In
2

3
00:00:14,950 --> 00:00:15,540
this step,
3

4
00:00:15,550 --> 00:00:19,840
Let's do some validation around the user name and password.
4

5
00:00:19,840 --> 00:00:23,560
One of the important things that you need to remember, is the validation that we would introduce in this
5

6
00:00:23,560 --> 00:00:28,630
basic step, is kind of a hard coded validation,  as you're just getting started with Angular, and we will
6

7
00:00:28,630 --> 00:00:30,420
want to understand the possibilities.
7

8
00:00:30,510 --> 00:00:33,400
So let's hard-code stuff in here.
8

9
00:00:33,400 --> 00:00:37,430
Typically this is not something you do in a production application.
9

10
00:00:37,460 --> 00:00:40,840
Remember that warning before you would go into this specific step.
10

11
00:00:40,840 --> 00:00:46,460
Let's move to the login.component.html template, and remove the username info and stuff, which
11

12
00:00:46,470 --> 00:00:47,800
is present in here.
12

13
00:00:47,800 --> 00:00:52,950
What I'll do is I'll comment this out,  control-/ or command-/
13

14
00:00:53,180 --> 00:00:57,410
What do you want to do, is we would want to introduce a validation on the username and password.
14

15
00:00:57,590 --> 00:01:00,890
What we do for now is we use the handleLogin().
15

16
00:01:01,070 --> 00:01:06,540
So in the handleLogin() method, what we'll do is we'll introduce the hard coded logic.
16

17
00:01:06,770 --> 00:01:12,830
What we want to do is when a specific user name and password is entered, which is entered on login, that's
17

18
00:01:12,830 --> 00:01:19,970
fine but if invalid user name and password are entered, what we want to show is a message saying invalid
18

19
00:01:19,970 --> 00:01:21,860
credentials at the top.
19

20
00:01:21,860 --> 00:01:25,120
So how can we show a message saying invalid credentials at the top.
20

21
00:01:25,160 --> 00:01:26,070
What should we do?
21

22
00:01:26,260 --> 00:01:28,590
We should go obviously to the HTML, right?
22

23
00:01:28,790 --> 00:01:36,160
So let's go here, and let's add a simple tag... I used a small font and I'll say Invalid credentials.
23

24
00:01:36,210 --> 00:01:38,890
Yes.
24

25
00:01:39,020 --> 00:01:46,190
So what would happen is, let's ensure ... let's put a div around the user name and password so that it's
25

26
00:01:46,190 --> 00:01:49,710
actually shown on the next line.
26

27
00:01:49,890 --> 00:01:52,410
Let's wrap them in as well.
27

28
00:01:52,730 --> 00:01:53,540
Ok cool.
28

29
00:01:53,570 --> 00:01:56,910
Now let's see what would have been invalid credentials is shown on the top.
29

30
00:01:56,960 --> 00:01:58,130
The username password.
30

31
00:01:58,250 --> 00:01:58,910
That's cool.
31

32
00:01:59,060 --> 00:02:06,600
But the thing is we only want to show invalid credentials in the case of invalid credentials right.
32

33
00:02:06,620 --> 00:02:10,580
So right now the user has not even clicked the plug in button, and we are showing invalid credentials!
33

34
00:02:10,610 --> 00:02:11,980
That's not really good.
34

35
00:02:11,990 --> 00:02:15,380
The other thing is I don't really like, is  the fact that we hardcoded in here.
35

36
00:02:15,620 --> 00:02:25,960
Let's actually move to the login component ... message ... so I'll call this error message =  'invalid
36

37
00:02:25,970 --> 00:02:26,690
credentials'
37

38
00:02:26,700 --> 00:02:30,490
And I would want to use it from the errormessage. How can I use it here?
38

39
00:02:31,770 --> 00:02:32,540
Simple right.
39

40
00:02:32,560 --> 00:02:33,380
Interpolation.
40

41
00:02:34,820 --> 00:02:39,810
Let's put errormessage you would see that it's as usual.
41

42
00:02:39,900 --> 00:02:45,320
Now in the handleLogin(), let's write a little bit of business logic to it and if I do that and who is
42

43
00:02:45,320 --> 00:02:47,010
not an invalid user.
43

44
00:02:47,300 --> 00:02:54,080
So I create a variable here called invalid Login.
44

45
00:02:54,200 --> 00:03:05,370
Initially it would be false. Let's comment this out... and let's say if this.username ===
45

46
00:03:05,630 --> 00:03:09,230
In Java we would typically use ==. In javascript.
46

47
00:03:09,270 --> 00:03:12,750
The safest way to do comparison is to use ===.
47

48
00:03:12,990 --> 00:03:25,050
So if this.user name === in28minutes and this.password ===
48

49
00:03:25,050 --> 00:03:36,830
dummy then invalidLogin = true. What are saying is in this kind of scenario.
49

50
00:03:36,850 --> 00:03:37,880
invalid login is going to false.
50

51
00:03:37,890 --> 00:03:40,270
This is kind of a mistake which we typically do.
51

52
00:03:40,280 --> 00:03:41,070
What's the solution.
52

53
00:03:41,070 --> 00:03:45,850
Think about it what should I do this in javascript.
53

54
00:03:45,870 --> 00:03:47,690
You always need to use this.
54

55
00:03:47,910 --> 00:03:59,000
So there's nothing really. login = false, else this.invalidLogin = true. Isn't
55

56
00:03:59,000 --> 00:04:00,040
this interesting!
56

57
00:04:00,270 --> 00:04:03,480
Now if I'm saving this... will this make a difference?
57

58
00:04:04,670 --> 00:04:07,060
Click login... oops!
58

59
00:04:07,070 --> 00:04:09,850
Nothing is getting printed because we removed that log.
59

60
00:04:10,010 --> 00:04:13,850
But it's not really toggling the invalid credentials.
60

61
00:04:15,060 --> 00:04:22,680
Now what I would want to do is I would want to tie this invalidLogin value to the display of this
61

62
00:04:22,680 --> 00:04:23,920
error message.
62

63
00:04:23,940 --> 00:04:25,120
How can I do that.
63

64
00:04:25,290 --> 00:04:30,960
I would want to say should this only if invalid log in is true.
64

65
00:04:31,230 --> 00:04:39,410
How can I do that? the way you can do that is by adding a ngAttribute, an angular attribute.
65

66
00:04:39,510 --> 00:04:46,860
As we discussed earlier angler's attributes add additional meaning to HTML, and over here we use something
66

67
00:04:46,860 --> 00:04:47,870
called ngIf.
67

68
00:04:47,880 --> 00:05:02,200
So show the element only if valid login. Let's save this and loops you'll see that the invalid log
68

69
00:05:02,200 --> 00:05:04,270
in message disappeared.
69

70
00:05:04,300 --> 00:05:06,860
And now I'm going to click log in.
70

71
00:05:06,940 --> 00:05:14,430
Those are entered in28minutes an empty password chosen in credentials. If I say dummy and say
71

72
00:05:14,440 --> 00:05:20,290
log in it disappears, and the password log in invalid credentials.
72

73
00:05:20,470 --> 00:05:21,500
Isn't this cool!
73

74
00:05:21,760 --> 00:05:27,290
In this step, we enhanced the handleLogin() method with some hard-coded authentication logic
74

75
00:05:27,300 --> 00:05:32,810
This is not what you do in typical production applications, for now it helps us to get going with Angular.
75

76
00:05:33,100 --> 00:05:40,800
And what we did is we use this authentication logic to tie up the error message down to and that do
76

77
00:05:41,010 --> 00:05:48,550
in ngIf.  if we implemented some small business logic and I did.  I'm having a lot of fun introducing all these
77

78
00:05:48,550 --> 00:05:52,140
concepts to you and I'm sure you are having a lot of fun too.
78

79
00:05:52,150 --> 00:05:53,550
I'll see you in the next step.
