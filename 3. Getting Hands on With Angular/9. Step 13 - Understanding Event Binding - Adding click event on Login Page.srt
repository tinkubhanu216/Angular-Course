0
1
00:00:02,380 --> 00:00:07,870
Welcome back. In the previous step, we created a simple login component, and we said in this step, we'll
1

2
00:00:07,870 --> 00:00:10,570
add a little bit more complexity to it.
2

3
00:00:10,870 --> 00:00:11,680
Let's get started.
3

4
00:00:11,680 --> 00:00:17,650
In this specific step. Now we have a user name and password. That looks good but we don't really have
4

5
00:00:17,650 --> 00:00:18,510
a button yet.
5

6
00:00:18,520 --> 00:00:18,850
Right!
6

7
00:00:18,850 --> 00:00:21,020
Typically you need a button to be able to log in.
7

8
00:00:21,020 --> 00:00:25,270
So let's add a button. <button> and lets call it a login button.
8

9
00:00:26,500 --> 00:00:28,380
Will I be able to see the login button?
9

10
00:00:28,420 --> 00:00:31,580
Yes I can see the log in button, and click the logging button.
10

11
00:00:31,600 --> 00:00:37,030
Nothing is happening in here! So I can enter the username and password and I can click log in.
11

12
00:00:37,030 --> 00:00:44,820
Nothing is happening in here, right! When I do, I click to inspect, and go to the console,
12

13
00:00:45,380 --> 00:00:47,820
You don't see anything down here yet.
13

14
00:00:47,930 --> 00:00:53,720
What can I do to make sure, that I can perform an action when the logon button is clicked?
14

15
00:00:53,720 --> 00:00:59,780
Typically, when you write typical javascript, what we do is we created,  we create a javascript file (external one) and
15

16
00:00:59,780 --> 00:01:02,680
we create a method in it, and we will stay onclick.
16

17
00:01:02,680 --> 00:01:07,500
= doSomething, and it takes a very very simple approach.
17

18
00:01:07,850 --> 00:01:11,110
We made use of something called data binding.
18

19
00:01:11,150 --> 00:01:17,000
So let's open up the login component.. login.component,
19

20
00:01:17,150 --> 00:01:19,350
Yes that's the one that you would want to open.
20

21
00:01:19,370 --> 00:01:20,070
What are we going do.
21

22
00:01:20,130 --> 00:01:26,930
Well here we can have a... let's say a default value for the user, and I take that username =
22

23
00:01:27,710 --> 00:01:28,480
the default value.
23

24
00:01:28,490 --> 00:01:30,620
I would want to give this, let's say, 
in28minutes
24

25
00:01:30,620 --> 00:01:31,340
(All small).
25

26
00:01:31,400 --> 00:01:32,590
Be careful with it.
26

27
00:01:32,660 --> 00:01:38,240
So your name is in28minutes attached to the default user name that I would want to show, and the default
27

28
00:01:38,240 --> 00:01:42,340
password I would want to show is password = ''.
28

29
00:01:42,650 --> 00:01:46,590
Let's use single quotes to keep it consistent.
29

30
00:01:46,700 --> 00:01:50,050
So we have a user name in28minute, password is empty.
30

31
00:01:50,050 --> 00:01:54,070
Now I would want to share this default on the login code.
31

32
00:01:54,140 --> 00:01:55,360
How can we do that.
32

33
00:01:55,370 --> 00:01:58,460
Think about it, we used this feature a little while ago.
33

34
00:01:58,730 --> 00:02:05,480
We can do that, is by saying value =  what the value should be?
34

35
00:02:05,530 --> 00:02:12,290
We can use interpolation. We can do interpolation, to get the value which is in the component.
35

36
00:02:12,350 --> 00:02:17,660
So from the component, I want to get the value for what for use that name.
36

37
00:02:17,690 --> 00:02:19,380
So let's go ahead and do that.
37

38
00:02:19,450 --> 00:02:25,120
Now it says value = username, and password the default value would be empty.
38

39
00:02:25,250 --> 00:02:27,400
Let's receive it.
39

40
00:02:27,660 --> 00:02:31,060
Let's put password in here, that's the name username and password.
40

41
00:02:31,060 --> 00:02:34,630
We are taking these names, and we are putting them in here.
41

42
00:02:34,880 --> 00:02:35,970
Let's see what would happen.
42

43
00:02:36,350 --> 00:02:40,310
Then the page refreshes by default. user name has in28minutes
43

44
00:02:40,310 --> 00:02:48,720
So what we're doing in here, is we are taking data from the component and tying it to the template.
44

45
00:02:48,730 --> 00:02:55,990
So from the view logic where the data is present, we are tying it down to a template for starting off.
45

46
00:02:56,000 --> 00:03:00,590
Let's say when logging button is clicked,  I would want to print the user name. The way we can do that in
46

47
00:03:00,590 --> 00:03:04,280
Angular is by doing something called event binding.
47

48
00:03:04,580 --> 00:03:09,770
So the syntax of the binding is nothing but event. Which event are you listening to?
48

49
00:03:09,980 --> 00:03:12,340
And method do you want to call?
49

50
00:03:12,390 --> 00:03:14,280
So what should you do?
50

51
00:03:14,450 --> 00:03:16,960
So when are you going to have event, what should you do?
51

52
00:03:16,970 --> 00:03:20,810
The event we are looking for here is something called click.
52

53
00:03:21,110 --> 00:03:28,130
So we're looking for the click event, and what we want to do is we would want to call a method. What
53

54
00:03:28,130 --> 00:03:32,380
is the method that I would want to call to handle login?
54

55
00:03:32,660 --> 00:03:36,300
Let's refresh the page and click login, but nothing happened.
55

56
00:03:36,500 --> 00:03:44,690
Inspect control it says handleLogin() is not really a function.
56

57
00:03:44,930 --> 00:03:47,100
How do we fix this?
57

58
00:03:47,110 --> 00:03:51,960
We said call handleLogin(), but we did not really define the handleLogin any way.
58

59
00:03:52,210 --> 00:03:59,060
The great thing about Angular is the fact that the place where we would be this is the login component
59

60
00:03:59,140 --> 00:04:02,150
So this component would handle all the view logic.
60

61
00:04:02,170 --> 00:04:08,800
So all the methods which are related to the view, would be coded in login component. So what I need
61

62
00:04:08,800 --> 00:04:15,190
to do, is define a method called handleLogin() in here, and let's do a simple control.log.
62

63
00:04:15,250 --> 00:04:23,190
Let's just print. well certainly, can see that there is a compilation error because when you are referring
63

64
00:04:23,190 --> 00:04:32,690
to member variables, you have to use this log. Let's see what would happen now when you say login
64

65
00:04:33,780 --> 00:04:36,800
it's printing in28minutes.
65

66
00:04:36,810 --> 00:04:41,580
That's a small warning in here, which you can ignore if you are really interested, and just go and read
66

67
00:04:41,670 --> 00:04:42,430
about it.
67

68
00:04:42,450 --> 00:04:50,410
That's what would happen if I change the user name in28minutes, change it and click logging it again
68

69
00:04:50,490 --> 00:04:51,480
it's printing in28minutes
69

70
00:04:51,490 --> 00:04:56,030
The log here says that in28minutes is printed earlier, and again right now.
70

71
00:04:56,160 --> 00:04:59,970
So I get that in28minutesExtended, but it's printing in28minutes.
71

72
00:04:59,970 --> 00:05:09,570
again. How do I take the data from the login element from the view element, and populate it into the component
72

73
00:05:09,570 --> 00:05:10,270
data?
73

74
00:05:10,290 --> 00:05:12,760
What we are able to do is take the component data,
74

75
00:05:12,870 --> 00:05:18,300
We were able to use interpolation, and put it on the screen. But now what we want to do, is what the user
75

76
00:05:18,390 --> 00:05:19,510
has typed in,
76

77
00:05:19,560 --> 00:05:23,270
I would want to be able to take it and show it in the component.
77

78
00:05:23,280 --> 00:05:24,990
How do I do that?
78

79
00:05:25,020 --> 00:05:27,470
Think about it and I'll see you in the next step.
