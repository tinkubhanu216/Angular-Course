0
1
00:00:02,680 --> 00:00:08,170
Welcome back. In the previous step we implemented the basic route.
1

2
00:00:08,380 --> 00:00:14,010
So when we type in a URL, we were able to directly go to that specific component. Well, what we wanted to
2

3
00:00:14,010 --> 00:00:19,900
really achieve was when I entered the right password and click login, I wanted to go to the welcome
3

4
00:00:19,900 --> 00:00:20,840
page.
4

5
00:00:20,920 --> 00:00:22,150
How do we do that?
5

6
00:00:22,150 --> 00:00:26,670
That's basically what we would be focusing on in this specific step.
6

7
00:00:26,680 --> 00:00:34,770
Let's go down to our login component, login.component.ts is where our business logic is. Let's
7

8
00:00:34,780 --> 00:00:36,070
maximize this.
8

9
00:00:36,070 --> 00:00:46,850
And now over here, I'd want in this specific situation I would want to re-direct to come here. Now if
9

10
00:00:46,850 --> 00:00:55,850
I want to redirect to the welcome page, I would need an instance of the router. I would want to use the router which
10

11
00:00:55,850 --> 00:00:58,500
is currently defined by Angular.
11

12
00:00:58,580 --> 00:01:05,500
Typically when you look at old code, the way we would do that is by saying, asking something like Angular.
12

13
00:01:05,630 --> 00:01:09,160
giveMeRouter()
13

14
00:01:09,370 --> 00:01:13,270
That's basically the way we would do that in our applications.
14

15
00:01:13,480 --> 00:01:17,910
So if I want router, I would go and get it. In the last few years.
15

16
00:01:18,130 --> 00:01:25,120
a new concept called dependency injection has picked up a lot of momentum, and it's awesome.
16

17
00:01:25,210 --> 00:01:31,750
The concept of dependency injection is basically that if I need something, I should declare it as a dependency
17

18
00:01:32,230 --> 00:01:36,770
and Angular would make sure that the dependency would be given to me.
18

19
00:01:36,870 --> 00:01:41,890
If you work with frameworks like spring in the Java world, you would already be aware of dependency
19

20
00:01:41,890 --> 00:01:50,770
injection, and dependency injection is a built-in feature, so you don't really need to add any libraries
20

21
00:01:50,770 --> 00:01:57,290
or anything of that kind. To add Dependency Injection feature to Angular. Over here, what you want to do.
21

22
00:01:57,300 --> 00:01:58,180
is you would want to
22

23
00:01:58,240 --> 00:02:01,800
use the router when any component,
23

24
00:02:01,800 --> 00:02:07,330
for example here login component, wants to make use of another component.
24

25
00:02:07,330 --> 00:02:13,550
For example, the router in here, the router is called a dependency.
25

26
00:02:13,800 --> 00:02:17,340
So router is a dependency of the login component.
26

27
00:02:17,530 --> 00:02:25,570
And if I want to get the dependency, what I would need to do is I would need to declare it as a constructor
27

28
00:02:25,900 --> 00:02:26,910
argument.
28

29
00:02:27,070 --> 00:02:33,620
What we can do here is create a parameter of type.
29

30
00:02:35,360 --> 00:02:42,500
I'm saying router:Router. What I would want to do, is find it out there and inject it in into
30

31
00:02:42,530 --> 00:02:44,790
this particular component.
31

32
00:02:44,810 --> 00:02:52,520
So when I pressed enter, the class was imported in, and as you can see it it's from a module called angular
32

33
00:02:52,910 --> 00:02:54,030
/router
33

34
00:02:54,130 --> 00:03:01,940
And so we are importing router here,  and we added a variable in here. What would happen now is and
34

35
00:03:02,070 --> 00:03:06,350
we take the built in router and make it available in here.
35

36
00:03:06,350 --> 00:03:12,280
This feature is called dependency injection and it's built in into Angular, in typescript.
36

37
00:03:12,380 --> 00:03:19,760
Whenever you pass in a parameter to a constructor what would happen is that.
37

38
00:03:19,820 --> 00:03:23,610
parameter would be available as a member variable.
38

39
00:03:23,780 --> 00:03:31,890
In Java you'd typically create a variable in here, saying a Router router and after that you would go
39

40
00:03:31,890 --> 00:03:36,110
here and say this.router is equal to that.
40

41
00:03:36,320 --> 00:03:42,000
Typically the Java code that we would write, but in typescript you don't really need to do anything. If
41

42
00:03:42,000 --> 00:03:49,810
you pass something as a constructor argument, it is by default available as member variable.
42

43
00:03:50,130 --> 00:03:54,600
The important thing is, I would want to add aprivate, so I don't want it to be used outside the specific
43

44
00:03:55,200 --> 00:03:57,980
class so, I'll add a private router: Router.
44

45
00:03:58,080 --> 00:04:00,920
And now you would want to redirect the welcome page.
45

46
00:04:00,930 --> 00:04:02,470
How can we do that?
46

47
00:04:02,730 --> 00:04:12,150
This router there is a method called navigate(). So the navigate helps us to route to a specific page.
47

48
00:04:12,240 --> 00:04:17,880
One of the important things that you would need to know, is navigate accepts an array and the first argument
48

49
00:04:17,880 --> 00:04:25,650
inside this array is the page you want to navigate to. At a later point in time we, look at parameter that
49

50
00:04:25,650 --> 00:04:27,650
you can pass along with the router.
50

51
00:04:27,900 --> 00:04:36,270
But for now let's just stick to the basics, and we are just passing in the welcome route. Let's now go to the
51

52
00:04:36,280 --> 00:04:38,730
browser... in28minutes
52

53
00:04:38,760 --> 00:04:40,130
Password is empty.
53

54
00:04:40,250 --> 00:04:44,890
Login credentials as expected, dummy login
54

55
00:04:44,890 --> 00:04:45,510
Cool!
55

56
00:04:45,510 --> 00:04:49,170
Now we're going to the welcome page.
56

57
00:04:49,170 --> 00:04:52,710
So what are the changes that we have made are working.
57

58
00:04:52,710 --> 00:05:00,810
So we are able to navigate from the login page to the welcome page. In this step, we focused on how to
58

59
00:05:00,810 --> 00:05:08,340
navigate from the login page to the welcome page. In this step we implemented the navigation from the
59

60
00:05:08,340 --> 00:05:11,160
login page to the welcome page.
60

61
00:05:11,250 --> 00:05:16,350
All that we had to do was enhance the login component: we needed to use different injection to inject
61

62
00:05:16,350 --> 00:05:20,110
the router, and the router is the thing which controls the routing.
62

63
00:05:20,220 --> 00:05:25,280
And we had to invoke a method called navigate() on the router.
63

64
00:05:25,530 --> 00:05:27,800
I'm sure you're having a lot of fun and I'll see you in the next step.
64

65
00:05:27,820 --> 00:05:28,670
Until then, bye-bye!
