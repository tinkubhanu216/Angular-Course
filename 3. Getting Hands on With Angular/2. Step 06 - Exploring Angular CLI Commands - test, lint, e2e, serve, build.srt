0
1
00:00:02,290 --> 00:00:08,960
Welcome back. In one of the previous steps, we saw that when we run ng serve inside the todo folder, we
1

2
00:00:08,980 --> 00:00:14,180
were able to launch up the angular application, and we were able to look at it in the browser. In this
2

3
00:00:14,250 --> 00:00:19,960
step, let's explore ng serve further,  as well as let's look at a few other ng commands.
3

4
00:00:20,050 --> 00:00:22,920
that you can run from your command line.
4

5
00:00:23,110 --> 00:00:29,530
I would want to look at a file called index.html in the source.
5

6
00:00:29,650 --> 00:00:35,020
So let's go to the source index.html . Inside this file is the title.
6

7
00:00:35,020 --> 00:00:36,710
So you'll see that To Do.
7

8
00:00:36,760 --> 00:00:37,960
This is where it's coming from.
8

9
00:00:37,960 --> 00:00:47,200
So let's go ahead and change this to something else, let's say My To Do Application, and I'm saving it
9

10
00:00:47,200 --> 00:00:47,970
right now.
10

11
00:00:48,220 --> 00:00:53,430
What happens is you would see that I'm not doing anything on the browser right now.
11

12
00:00:53,500 --> 00:01:00,660
Within a little while, you'd see that it's auto-loaded. That's what ng serve does. ng serve would
12

13
00:01:00,670 --> 00:01:03,420
keep pulling your code for changes.
13

14
00:01:03,430 --> 00:01:09,840
And as soon as there is a change, it would pick up, build it and it would load it into the browser.
14

15
00:01:09,850 --> 00:01:14,980
Let's do another example let's go to source app... app.component.html.
15

16
00:01:14,980 --> 00:01:18,910
This is where the actual content of this page is coming from.
16

17
00:01:18,910 --> 00:01:24,060
Welcome to To Do, the the logo as well as the links which are present in here.
17

18
00:01:24,190 --> 00:01:30,100
For the most part, this is typical html, except for something called interpollation which is being used
18

19
00:01:30,160 --> 00:01:30,650
in here.
19

20
00:01:30,650 --> 00:01:31,840
We'll look at it a little later.
20

21
00:01:31,840 --> 00:01:38,440
But for now let's remove the <h2>, and the <ul>. So i'm removing the links which are present in here
21

22
00:01:38,920 --> 00:01:45,420
and saving it. You would see that immediately the change is reflected on the browser.
22

23
00:01:45,670 --> 00:01:51,840
That's the most important thing that ng serve brings onto the plate.  So as soon as  you are making a change.
23

24
00:01:51,940 --> 00:01:54,380
You can see it reflect on your browser.
24

25
00:01:54,550 --> 00:01:57,590
Now let's look at a few other commands. ng <space>
25

26
00:01:57,590 --> 00:02:03,340
lint. ng lint. When you ran it, it would say linting, and it would finally print that.
26

27
00:02:03,340 --> 00:02:10,300
There are no violations which are present,  and so the question you might ask is what is linting? Who's doing the
27

28
00:02:10,310 --> 00:02:11,120
linting?
28

29
00:02:11,170 --> 00:02:15,600
Linting is nothing but checking your code for coding standards.
29

30
00:02:15,760 --> 00:02:21,460
Because the code which we have is generated, we did not write a single line of code by hand.
30

31
00:02:21,460 --> 00:02:29,110
Yet all these files pass the coding standard. What we do now, is we introduce a coding standard violation.
31

32
00:02:29,110 --> 00:02:34,240
How can I introduce a coding standard violation? Go to Visual Studio Code, open up a file called app.
32

33
00:02:34,250 --> 00:02:35,250
component.
33

34
00:02:35,310 --> 00:02:42,940
This is the way you can open a file, is by searching through the explorer, and finding it and opening
34

35
00:02:42,940 --> 00:02:46,200
it, or you can press command-B or control-B.
35

36
00:02:46,330 --> 00:02:52,770
If you are on Mac, it's command-B, and if you are on Windows it's Control-B. You can type in app.component
36

37
00:02:53,100 --> 00:02:53,650
<dot>.
37

38
00:02:53,750 --> 00:02:54,320
Yes.
38

39
00:02:54,370 --> 00:03:01,090
And you should be able to load that specific file into the UI.  You'd see that at the end of every typescript
39

40
00:03:01,090 --> 00:03:01,840
file.
40

41
00:03:01,960 --> 00:03:07,720
There is a newline character. What I'll do is remove the new line characters so now this file has
41

42
00:03:08,020 --> 00:03:09,920
only 10 lines.
42

43
00:03:09,940 --> 00:03:18,490
Let's go to the terminal and do ng lint.  What you see is that it would say there is a file which has
43

44
00:03:18,490 --> 00:03:21,440
a problem. Aha!
44

45
00:03:21,460 --> 00:03:28,750
It says: Lint errors found in the listed files... it says error: app.component.ts file should end
45

46
00:03:28,750 --> 00:03:32,980
with a new line, that what is the standard.
46

47
00:03:33,070 --> 00:03:36,710
Now you might be wondering where are all these rules defined.
47

48
00:03:36,820 --> 00:03:40,610
All these rules are defined inside a file in our project, which 
48

49
00:03:40,980 --> 00:03:43,720
is tslint.json.
49

50
00:03:44,020 --> 00:03:49,330
This is where all the rules are defined, and the end of file rule that we looked at, is defined on line
50

51
00:03:49,330 --> 00:03:50,360
17, right.
51

52
00:03:50,440 --> 00:03:58,170
So it's "eofline":true. So it should make sure that at the end of the file there is a newline character
52

53
00:03:59,330 --> 00:04:04,610
The great thing about this file, is the fact that you can customize it according to the needs of your
53

54
00:04:04,610 --> 00:04:06,830
particular project.
54

55
00:04:06,860 --> 00:04:11,280
Now that I added the new line, I can do ng lint, and you would see that there are no errors.
55

56
00:04:11,720 --> 00:04:14,630
Let's get back to the command line, and let's run a few more.
56

57
00:04:14,840 --> 00:04:19,690
Let's go on to the next command which is ng build.
57

58
00:04:19,850 --> 00:04:21,410
What does the ng build do?
58

59
00:04:21,690 --> 00:04:23,530
Let's run it and see what's happening.
59

60
00:04:24,020 --> 00:04:29,600
What you see is when you run ng build, it says there are specific files created main.js,  polyfills.js, 
60

61
00:04:29,600 --> 00:04:38,600
runtime.js, styles.js,  vendor.js,  and when you go to the IDE, you see that there
61

62
00:04:38,600 --> 00:04:44,120
is a new folder which is present in here, which is the dist folder.
62

63
00:04:44,420 --> 00:04:50,540
If you open up the dist, you would see a few files which are present in here, in this main.js, and
63

64
00:04:50,540 --> 00:04:52,550
all that kind of stuff.
64

65
00:04:52,580 --> 00:04:59,660
The good thing about this folder, is you can take this todo folder,  and put it behind any web server and
65

66
00:04:59,660 --> 00:05:05,180
you'd be able to launch index.html, and run the application.
66

67
00:05:05,210 --> 00:05:11,670
So you don't really need any of the other code which is present in here, to launch these angular applications.
67

68
00:05:11,690 --> 00:05:18,630
Typically when we deploy angular applications to production, what we would do is we would execute in dist.
68

69
00:05:18,860 --> 00:05:24,090
And we would take this folder which is generated and put it on the web server.
69

70
00:05:24,340 --> 00:05:31,040
So into this, it makes it easy to deploy applications to other environments. For example, test environments,
70

71
00:05:31,120 --> 00:05:36,680
or production, or... All you need to do is to copy this to other environments.  The next command which we are going
71

72
00:05:36,680 --> 00:05:44,010
to look at is ng test. We only write applications, we are supposed to write a lot of unit tests and
72

73
00:05:44,030 --> 00:05:51,980
you test runs the unit tests which are written. For angular applications typically, unit tests for angular
73

74
00:05:52,070 --> 00:05:59,160
are written in a framework called Jasmine, and we're using karma to run the unit.
74

75
00:05:59,390 --> 00:06:07,400
You can see that all the tests ran, and there are zero failures. In front-end language, tests are called
75

76
00:06:07,450 --> 00:06:08,840
specs.
76

77
00:06:09,080 --> 00:06:11,420
So these specifications.
77

78
00:06:11,480 --> 00:06:13,320
What are they running?
78

79
00:06:13,580 --> 00:06:19,730
And you can see what are the specifications which ran. App Component should create an app. App component should
79

80
00:06:19,730 --> 00:06:28,450
have a title To Do. App Component should render title in a <h1> tag. If you want to run any of the specificications
80

81
00:06:28,460 --> 00:06:32,660
again, you can click them, or you can click the app on it to run this again.
81

82
00:06:32,900 --> 00:06:36,720
Let's quickly look at where these tests are defined.
82

83
00:06:36,740 --> 00:06:39,400
There are a few important files that related to unit tests.
83

84
00:06:39,410 --> 00:06:41,450
The first one is the karma.conf.js.
84

85
00:06:41,450 --> 00:06:46,700
This is the configuration of the test-runner, which is. karma. Other than that, there are a number of tests
85

86
00:06:46,700 --> 00:06:50,230
which are written as part of your angular code.
86

87
00:06:50,270 --> 00:06:57,040
Typically these files would have an extension .spec . The spec stands for specification.
87

88
00:06:57,030 --> 00:06:58,150
That's basically the test.
88

89
00:06:58,220 --> 00:07:02,700
And if you open up the spec file, you should see all the tests which are written.
89

90
00:07:02,700 --> 00:07:05,080
So these are the tests which ran earlier.
90

91
00:07:05,120 --> 00:07:09,140
So you can see all the tests which are present in here.
91

92
00:07:09,650 --> 00:07:11,950
And let's exit this by saying control-C.
92

93
00:07:12,020 --> 00:07:15,780
Now the other command which is present in here is ng e2e.
93

94
00:07:16,510 --> 00:07:21,140
e2e stands for ng End-to-end.
94

95
00:07:21,290 --> 00:07:28,700
So end-to-end. There's much more than the unit tests. unit tests test individual components one at a time.
95

96
00:07:29,230 --> 00:07:35,300
with end-to-end tests, what happens is we would launch the entire angular application, you can see that we are
96

97
00:07:35,300 --> 00:07:38,750
launching the angler application at localhost:4200.
97

98
00:07:38,750 --> 00:07:39,880
It's still building up.
98

99
00:07:39,980 --> 00:07:41,080
It might take a little while.
99

100
00:07:41,190 --> 00:07:49,820
So now, the application has been launched up. And now you would see that we are actually running the entire application
100

101
00:07:49,940 --> 00:07:58,700
and running these tests around it. You'd see that over here, it's showing display a message and it says one
101

102
00:07:58,900 --> 00:08:00,400
test successful.
102

103
00:08:00,470 --> 00:08:06,290
If you look at the logs you would see that there was something called a chrome driver which was downloaded
103

104
00:08:06,590 --> 00:08:11,200
which is actually something related to the selenium automation.
104

105
00:08:11,210 --> 00:08:21,210
Yes the chrome driver was installed, and the chrome driver was used to launch up the tests in the end to end
105

106
00:08:21,390 --> 00:08:22,240
mode.
106

107
00:08:22,430 --> 00:08:30,380
I'm using a framework called protractor. protractor is a layer around the selenium API which helps us to
107

108
00:08:30,380 --> 00:08:37,700
write and do end-to-end tests. In this course, we will not be focusing on either the unit tests, or the end to end tests.
108

109
00:08:37,970 --> 00:08:42,990
All the code for the end to end tests is present inside this folder.
109

110
00:08:43,300 --> 00:08:47,720
And all here you would see also the protractor.conf.js.
110

111
00:08:47,900 --> 00:08:53,840
So this is the configuration for protractor, which is an end to end integration testing later, which
111

112
00:08:53,840 --> 00:09:01,270
is present in here as well. The file which defines what should happen when run a specific command. So we
112

113
00:09:01,270 --> 00:09:03,640
ran a number of commands, right?
113

114
00:09:03,750 --> 00:09:14,200
ng test, ng build, ng lint.  The angular.json file is where all these commands are defined. In this
114

115
00:09:14,200 --> 00:09:14,730
video,
115

116
00:09:14,790 --> 00:09:21,680
We looked at a few commands which we can execute from the command line, which are provided by Angular CLI.
116

117
00:09:21,730 --> 00:09:25,690
We looked at ng lint, which is to execute coding standards.
117

118
00:09:25,810 --> 00:09:32,670
We saw that there is a file called the lint.conf.js, on where all the lint rules all decoding standards
118

119
00:09:32,990 --> 00:09:34,650
are specified.
119

120
00:09:34,660 --> 00:09:41,920
Next we ran ng build, and we saw that a disk folder was created which contains all the files, which should
120

121
00:09:41,920 --> 00:09:49,550
be sufficient to deploy this specific application to external external environment.
121

122
00:09:49,900 --> 00:09:56,080
We ran ng test, which ran all the unit tests which were created using the jasmine framework in the .spec.js
122

123
00:09:56,080 --> 00:10:02,150
files, using the runner, which is defined as part of the karma.conf.js
123

124
00:10:02,170 --> 00:10:08,920
After that we ran the command ng e2e, and and all the tests which were defined in the end to end
124

125
00:10:09,000 --> 00:10:11,620
folder were executed.
125

126
00:10:11,650 --> 00:10:19,370
We saw that the entire application was launched up, and protractor was used to run the end to end tests.
126

127
00:10:20,080 --> 00:10:26,260
The idea behind this basic video is to give you a big picture or view of all the commands,  and what are
127

128
00:10:26,260 --> 00:10:28,410
the files associated with them.
128

129
00:10:28,480 --> 00:10:34,240
You might not really need to understand all these files in depth. It's sufficient to know where they
129

130
00:10:34,240 --> 00:10:36,160
are, and what they're related to.
130

131
00:10:36,340 --> 00:10:38,710
And that's good enough for now.
131

132
00:10:38,980 --> 00:10:40,230
I'll see you in the next step.
132

133
00:10:40,450 --> 00:10:40,730
Until then, bye-bye.
