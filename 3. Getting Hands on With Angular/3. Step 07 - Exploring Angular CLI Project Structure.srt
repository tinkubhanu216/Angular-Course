0
1
00:00:02,620 --> 00:00:12,350
Welcome back. In the previous step, we looked at a few ng commands: ng lint,  ng build, ng test
1

2
00:00:12,700 --> 00:00:14,320
and ng e2e.
2

3
00:00:14,380 --> 00:00:19,270
We looked at a few files which are related to each of those commands.
3

4
00:00:19,270 --> 00:00:25,570
When we look at our folder structure, there are still files which we have not really talked about. In
4

5
00:00:25,570 --> 00:00:26,160
this video,
5

6
00:00:26,260 --> 00:00:31,450
let's try and cover the other folders which are present in our workspace.
6

7
00:00:31,540 --> 00:00:34,970
When they open up the source folder, you'd see something called app.
7

8
00:00:34,990 --> 00:00:42,250
This is where all our angular code would go into.  When we build angular app, we would create them using something
8

9
00:00:42,250 --> 00:00:49,660
called components and modules. All the components and modules will be present in this app folder.
9

10
00:00:49,660 --> 00:00:58,300
The assets folder is where all the images go into. The content which needs to be rendered as it is, like images.
10

11
00:00:58,300 --> 00:01:00,070
They all go into the assets.
11

12
00:01:00,080 --> 00:01:06,220
folder. When we develop applications, we would want to deploy them in multiple
12

13
00:01:06,220 --> 00:01:09,610
environments,  dev environment,  QA, production, test.
13

14
00:01:09,780 --> 00:01:18,000
All the configuration for each of these environments go into the environment folder. Now that we looked
14

15
00:01:18,030 --> 00:01:19,720
at the important folders,
15

16
00:01:19,750 --> 00:01:23,180
let's look at the other files which are present in here.
16

17
00:01:23,350 --> 00:01:29,410
Let's start with the configjJson. Know that we'd be writing code in typescript.
17

18
00:01:29,530 --> 00:01:35,080
But do you know that your browser will not understand it, as your browser only understands javascript
18

19
00:01:35,560 --> 00:01:43,180
So whatever code that we write it needs to be converted to javascript, or whatever typescript code that
19

20
00:01:43,180 --> 00:01:50,080
we write as part of our source code needs to be converted to typescript. That is specified as part of
20

21
00:01:50,610 --> 00:01:53,140
the config.json.
21

22
00:01:53,140 --> 00:01:58,430
We already looked at README.md, which is kind of the documentation for this project.
22

23
00:01:58,480 --> 00:02:03,040
So if you have something to document about the project , you can put it in the meat or empty your building
23

24
00:02:03,310 --> 00:02:04,640
angular application.
24

25
00:02:04,660 --> 00:02:09,720
And we saw a number of commands which you were able to execute in the last step.
25

26
00:02:09,760 --> 00:02:14,110
ng lint, ng build, ng test and ng e2e.
26

27
00:02:14,320 --> 00:02:22,120
And all these things need a lot of external frameworks and tools. All these frameworks and tools are
27

28
00:02:22,210 --> 00:02:24,080
specified in the package.json 
28

29
00:02:24,100 --> 00:02:30,250
file. So on you'd see that all the frameworks are specified in here, are packages are specified in her
29

30
00:02:30,550 --> 00:02:37,840
, as well as all the tools that we would need to be able to run the unit tests,  integration testsm, and to run
30

31
00:02:37,900 --> 00:02:44,760
our angular application, whatever models you have defined in package.json. 
31

32
00:02:44,890 --> 00:02:53,080
I downloaded. When you run NPM install, node package manager is the package manager we're using.
32

33
00:02:53,080 --> 00:02:54,610
It's very similar to Maven.
33

34
00:02:54,760 --> 00:03:00,730
So once you specify the dependencies in here, when we do npm install, all these dependencies downloaded
34

35
00:03:01,150 --> 00:03:07,510
to the node_modules folder. The node_modules is where all your packages.
35

36
00:03:07,750 --> 00:03:15,080
That's basically your frameworks, and also the tools that you'd need to build and run your project.
36

37
00:03:15,290 --> 00:03:16,050
are downloaded to.
37

38
00:03:16,280 --> 00:03:19,600
We did not really explicitly do npm install at all.
38

39
00:03:19,750 --> 00:03:27,730
When we create a new angular app using ng new, the npm install command is automatically executed.
39

40
00:03:27,860 --> 00:03:34,090
The .gitignore file contains what are the different folders which should not be committed to version
40

41
00:03:34,090 --> 00:03:35,290
control.
41

42
00:03:35,350 --> 00:03:40,590
So when you commit this project version control, all these folders would be ignored.
42

43
00:03:40,860 --> 00:03:46,480
Index.html which you see in here and the main.html, is inside the src folder now, so  main.ts
43

44
00:03:46,500 --> 00:03:46,980
and
44

45
00:03:47,200 --> 00:03:55,720
the index.html which is present in here, are the things which are loaded up when we launch the
45

46
00:03:56,140 --> 00:03:57,250
angular application.
46

47
00:03:57,250 --> 00:04:02,980
So these are responsible for bootstrapping the angular application at the high level.
47

48
00:04:03,010 --> 00:04:08,590
That is something called the root module which will be launched up by the browser.
48

49
00:04:08,920 --> 00:04:13,990
Which will be included in index.html, and that's how the application get bootstrapped.
49

50
00:04:14,020 --> 00:04:17,420
We'll look at bootstrapping in Angular a little later.
50

51
00:04:17,470 --> 00:04:21,300
The other files which I present in here is something called polyfills.
51

52
00:04:21,410 --> 00:04:28,210
Yes we know that different browsers have different levels of support for all the web standards. The
52

53
00:04:28,210 --> 00:04:32,120
same javascript code might not work in all the browsers.
53

54
00:04:32,250 --> 00:04:37,720
Files like this would take care of these browser incompatibilities and make sure that whatever code
54

55
00:04:37,720 --> 00:04:42,170
that we write would be compatible with all the browsers.
55

56
00:04:42,380 --> 00:04:47,480
The styles.css is very you specified the global application styles.
56

57
00:04:47,560 --> 00:04:48,690
So whatever styles.
57

58
00:04:48,730 --> 00:04:54,280
whatever CSS you would want to use across the application, you'd put it inside the styles.css
58

59
00:04:54,350 --> 00:04:55,080
That
59

60
00:04:55,160 --> 00:04:59,650
is what is basically the starting point for running the units.
60

61
00:04:59,750 --> 00:05:08,160
So this is what is used when we run the ng test. In this video, we saw that all the other files which we
61

62
00:05:08,160 --> 00:05:12,500
were not able to cover inside of the previous step.
62

63
00:05:12,600 --> 00:05:18,530
The important one which we discussed were package.json, where we define all the tools and frameworks
63

64
00:05:18,530 --> 00:05:19,870
that we make use of.
64

65
00:05:20,010 --> 00:05:26,470
And these are downloaded to our node_models folder, when we run and do an install. The npm install is run automatically.
65

66
00:05:26,490 --> 00:05:33,480
for us, when we were creating the new project. The tsconfig.json defines how we would want
66

67
00:05:33,480 --> 00:05:39,940
to convert the typescript code we would write, to javascript code which runs on the browser.
67

68
00:05:40,170 --> 00:05:47,690
The app contains all the important code, typically model components and all the other stuff that you
68

69
00:05:47,680 --> 00:05:53,460
would write as part of you angular applications, as it contains things like images that you would want
69

70
00:05:53,460 --> 00:05:58,080
to use. And it might contain environment specific configuration if you want.
70

71
00:05:58,110 --> 00:06:04,230
Dev-specific configuration, or production specific configuration,  that's what goes into environment
71

72
00:06:04,570 --> 00:06:09,600
polyfills ensure that all the code that you write is compatible across all liberals.
72

73
00:06:09,850 --> 00:06:17,810
styles.css contains the global styles,  globalCSS. And test.ts  is a starting point for running
73

74
00:06:17,910 --> 00:06:18,970
unit tests.
74

75
00:06:19,080 --> 00:06:26,970
The idea behind the last two steps is to give you 10000 feet view on the project structure: the different
75

76
00:06:26,970 --> 00:06:30,200
folders, different files which are present in here.
76

77
00:06:30,390 --> 00:06:34,830
It's not really necessary that you need to know the absolute details of everything which is present
77

78
00:06:34,830 --> 00:06:35,490
in here.
78

79
00:06:35,490 --> 00:06:37,610
It's efficient if you know at a high level.
79

80
00:06:37,630 --> 00:06:40,360
This is related to this, and that would help you
80

81
00:06:40,410 --> 00:06:44,550
when we start building the app. I'll see you in the next step.
81

82
00:06:44,560 --> 00:06:45,360
Until then, Bye-bye.
