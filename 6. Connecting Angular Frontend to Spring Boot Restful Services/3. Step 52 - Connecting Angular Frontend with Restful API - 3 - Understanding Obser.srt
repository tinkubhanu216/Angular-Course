0
1
00:00:02,650 --> 00:00:07,880
welome back. In the previous step we executed the hello worldbeanservice.
1

2
00:00:08,040 --> 00:00:15,420
We saw that the service was not getting invoked, and we were printing something called observable in the
2

3
00:00:15,420 --> 00:00:16,530
console.
3

4
00:00:16,530 --> 00:00:23,460
Now what is this observable thing, and why are we not able to see the service being called on the network?
4

5
00:00:23,520 --> 00:00:28,440
Typically if I call a http service, it might really take a long time to execute.
5

6
00:00:28,470 --> 00:00:32,310
Some services might take three to five seconds to execute.
6

7
00:00:32,310 --> 00:00:38,460
If we do it synchronously, that what would happen because of this and we wait for the response.
7

8
00:00:38,580 --> 00:00:42,330
And in the meanwhile the entire browser would hang.
8

9
00:00:42,540 --> 00:00:48,390
That's the reason why we should call all http services asynchronously.
9

10
00:00:48,660 --> 00:00:54,990
Now observables is one of the best approaches to implementing a synchronous communication.
10

11
00:00:55,290 --> 00:01:03,920
What it does is, it makes extensive use of observables as the interface for most of the asynchronous operations.
11

12
00:01:03,990 --> 00:01:10,560
So if you want to make an object's request using the HTTP module, angular internally makes use of this
12

13
00:01:10,680 --> 00:01:11,800
observable.
13

14
00:01:12,060 --> 00:01:18,780
The most important thing about observables is this is declarative, in the sense that over here, you can
14

15
00:01:18,780 --> 00:01:26,040
define what you are allowed to call. We will later look at defining what should happen when I get a response
15

16
00:01:26,100 --> 00:01:29,480
back, and what should happen when I get an error back.
16

17
00:01:29,550 --> 00:01:37,100
You can define all that as part of an observable. However, let's look bit later. Over here,
17

18
00:01:37,530 --> 00:01:38,550
The observable.
18

19
00:01:38,550 --> 00:01:45,530
is not really executed, as the request is not really executed. We need to do something called
19

20
00:01:45,590 --> 00:01:47,570
a subscribe.
20

21
00:01:47,940 --> 00:01:54,080
So basically observable will help us to define: OK, this is the service i would want to call, this is the data
21

22
00:01:54,080 --> 00:01:55,770
I'm expecting back.
22

23
00:01:55,800 --> 00:02:03,110
This is the thing which I have to do when there is an error, but it does not really work the service
23

24
00:02:03,700 --> 00:02:06,530
until somebody subscribes to it.
24

25
00:02:06,540 --> 00:02:08,730
Let's look at what that means right now.
25

26
00:02:08,830 --> 00:02:11,680
So let's take this service what I'll do,
26

27
00:02:11,770 --> 00:02:15,420
I'll do a subscribe.
27

28
00:02:15,630 --> 00:02:19,100
So what we're doing in here is we are subscribing to this.
28

29
00:02:19,530 --> 00:02:20,690
Let's say this.
29

30
00:02:20,730 --> 00:02:21,980
There are things you can do with this object.
30

31
00:02:21,980 --> 00:02:23,810
I will talk about it a little later.
31

32
00:02:23,850 --> 00:02:29,160
For now, let's do a subscribe, and do  Get welcome message.
32

33
00:02:29,340 --> 00:02:30,080
Awesome.
33

34
00:02:30,090 --> 00:02:37,400
You see it and coming up, it is observable because we had to cancel that log.
34

35
00:02:37,750 --> 00:02:39,370
We are executing the service.
35

36
00:02:39,550 --> 00:02:47,450
And it says access to the http request at so and so on is blocked by CORS policy.
36

37
00:02:47,730 --> 00:02:54,820
No access control allowed, or to get head that is present on the request resources. And you can also see
37

38
00:02:54,820 --> 00:02:57,940
the details of the HTTPErrorResponse.
38

39
00:02:57,950 --> 00:03:03,880
The great thing is if you go back in the past now... let's expand this for so that you can clearly see
39

40
00:03:03,880 --> 00:03:04,020
it.
40

41
00:03:04,040 --> 00:03:06,470
Let's clear the old stuff out.
41

42
00:03:06,550 --> 00:03:07,710
Let's click it again.
42

43
00:03:08,110 --> 00:03:15,090
Now you see that the request is executed but we are not really getting a response back.
43

44
00:03:15,100 --> 00:03:17,830
It's giving us a response back.
44

45
00:03:17,830 --> 00:03:20,550
The response is empty there is no data present here.
45

46
00:03:20,730 --> 00:03:21,880
Why is it happening?
46

47
00:03:21,880 --> 00:03:22,750
Think about this.
47

48
00:03:22,870 --> 00:03:29,790
I'm calling from localhost:4200 which you are calling localhost.
48

49
00:03:29,970 --> 00:03:35,570
:8080 So this is like one Web site we're calling on the web.
49

50
00:03:35,570 --> 00:03:43,660
So what you're calling a service which is hosted on a different server from your front-end application.
50

51
00:03:44,030 --> 00:03:49,070
And by default, spring boot prevent these kind of request.
51

52
00:03:49,070 --> 00:03:55,340
So we need to tell Angular allow requests from a specific you need to tell.
52

53
00:03:55,380 --> 00:04:02,880
OK hey I know we're secure... you would want me to be safe... but I want to have requests from local host
53

54
00:04:03,060 --> 00:04:04,720
4200.
54

55
00:04:04,970 --> 00:04:06,130
How would I do that?
55

56
00:04:06,180 --> 00:04:19,060
You can do that just by going to our hello world controller and adding a simple annotation @CrossOrigin to
56

57
00:04:19,150 --> 00:04:22,600
have requests from other domains.
57

58
00:04:22,810 --> 00:04:29,820
And the best thing is to specify exactly which domains you would want to allow the requests from.
58

59
00:04:29,830 --> 00:04:35,570
I'd want do requests from only this specific URL.
59

60
00:04:35,770 --> 00:04:40,390
So only requests from this specific URL will be handled properly.
60

61
00:04:40,390 --> 00:04:48,370
So I made the change, and because we have to start, the changes automatically pick up. If the change is
61

62
00:04:48,370 --> 00:04:51,970
not automatically picked up,  you just restart the server.
62

63
00:04:52,120 --> 00:04:55,520
Now if I go here it's clear that the console.
63

64
00:04:55,660 --> 00:04:58,360
Let's clear this out as well, and say get welcome message.
64

65
00:04:58,450 --> 00:05:00,310
And now you'd see that it's printing
65

66
00:05:00,340 --> 00:05:01,800
But there is no error there.
66

67
00:05:02,060 --> 00:05:07,750
And if I go to the network tab you would see that the hello world bean message is called, and I'm getting
67

68
00:05:07,760 --> 00:05:09,910
that response back.
68

69
00:05:10,150 --> 00:05:11,260
So what is happening now?
69

70
00:05:11,590 --> 00:05:18,090
As soon as I subscribed to the observable the request is executed.
70

71
00:05:18,100 --> 00:05:25,960
The interesting thing is if I call subscribe a number of times... I'm now calling it three times... what would
71

72
00:05:25,960 --> 00:05:26,640
happen?
72

73
00:05:26,850 --> 00:05:28,910
Let's clear the consoles out
73

74
00:05:28,910 --> 00:05:30,500
Actually I'm clearing network right now.
74

75
00:05:30,520 --> 00:05:32,680
I clear the control as well.
75

76
00:05:32,680 --> 00:05:39,060
If you do get a welcome message what would happen? Now, didn't it work... you'd see that that request will
76

77
00:05:39,670 --> 00:05:48,130
execute. The the wonderful thing about observables is the fact that just by calling subscribe, you can
77

78
00:05:48,130 --> 00:05:52,010
execute this same code again and again and again.
78

79
00:05:52,090 --> 00:05:58,210
So if there is an error out later, this service calls error out and you will want to retry with observables,
79

80
00:05:58,250 --> 00:05:59,990
It's very very easy.
80

81
00:06:00,040 --> 00:06:01,940
You just need to call it again.
81

82
00:06:01,960 --> 00:06:03,640
You just need to subscribe to it.
82

83
00:06:03,670 --> 00:06:07,810
Again this would retry the entire service call.
83

84
00:06:07,940 --> 00:06:10,270
Now remove the unnecessary call.
84

85
00:06:10,270 --> 00:06:13,080
We just want to subscribe to it once.
85

86
00:06:13,150 --> 00:06:17,120
But what we want to do is we want to pick up data from here.
86

87
00:06:17,270 --> 00:06:22,460
We want to get the response, and we would want to show a message on the screen.
87

88
00:06:22,690 --> 00:06:25,300
Let's focus on that the next step . Bye!
