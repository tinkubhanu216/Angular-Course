0
1
00:00:02,500 --> 00:00:06,760
Welcome back. In the previous step, we created the delete service.
1

2
00:00:06,760 --> 00:00:08,170
We executed it.
2

3
00:00:08,240 --> 00:00:14,590
And in this step, let's focus on the UI part on the front end. In fact, you would want to be able to call delete
3

4
00:00:14,740 --> 00:00:15,820
from the UI.
4

5
00:00:15,820 --> 00:00:17,390
How can we do that?
5

6
00:00:17,390 --> 00:00:22,390
The first thing that you would need to do, is we need to enhance the To Do List component.
6

7
00:00:22,540 --> 00:00:29,530
So let's go to the HTML, and what we want to do is we would want to do a header called actions.
7

8
00:00:29,950 --> 00:00:32,140
So we would want to be able to invoke the delete.
8

9
00:00:32,140 --> 00:00:44,590
So let's add our actions, and let's and DD... let's say over hear button and onclick of the button
9

10
00:00:47,540 --> 00:00:49,150
add a method called delete
10

11
00:00:51,940 --> 00:00:54,320
and let's say delete.
11

12
00:00:54,640 --> 00:00:56,720
Let's see how this looks in the UI code.
12

13
00:00:56,770 --> 00:00:57,720
This is how it looks.
13

14
00:00:57,940 --> 00:01:06,680
And let's add a class=button, and btn and warning.
14

15
00:01:06,820 --> 00:01:08,020
See how this looks.
15

16
00:01:08,270 --> 00:01:09,980
This is how it looks.
16

17
00:01:09,980 --> 00:01:15,760
We don't really need to say delete todo, because it's almost inherent that you are deleting todo. so
17

18
00:01:15,770 --> 00:01:17,710
let's just have delete in here.
18

19
00:01:18,830 --> 00:01:22,100
And now we need to define delete todo method.
19

20
00:01:22,130 --> 00:01:24,570
Where do we need to do that, is todo component.
20

21
00:01:24,600 --> 00:01:35,960
Let's go ahead and delete it. Define it in here, over here let's add delete todo method, and console.log
21

22
00:01:37,440 --> 00:01:40,340
delete todo
22

23
00:01:40,850 --> 00:01:42,170
Let's go to the console
23

24
00:01:42,650 --> 00:01:47,410
And inspect... so that we can go to the console
24

25
00:01:47,600 --> 00:01:50,540
Yeah this is good enough. When I do delete,
25

26
00:01:50,560 --> 00:01:52,280
You can delete todo , and print it.
26

27
00:01:52,450 --> 00:01:57,560
One of the important things that I would need to be able to identify, is which todo is being deleted.
27

28
00:01:57,590 --> 00:02:01,860
The id of the todo being deleted that is very very important.
28

29
00:02:02,050 --> 00:02:07,940
And the id of the deleted todo. All that I need to do is to say todo.id,  that because there's a variable called
29

30
00:02:07,940 --> 00:02:12,680
todo which is already defined in here, and all that I need to do is say todo.
30

31
00:02:12,800 --> 00:02:14,160
Id. Save this.
31

32
00:02:14,180 --> 00:02:20,140
Now I can pass the ID in here. So I'll say id and delete todo.
32

33
00:02:20,390 --> 00:02:27,440
And let's change it to ticks,  so that we can actually print a variable name. so delete todo
33

34
00:02:30,720 --> 00:02:33,130
so we can print the value of the ID in here.
34

35
00:02:33,210 --> 00:02:39,570
Save this and let's go to the last page, and see what would happen if you click delete. delete todo 1
35

36
00:02:40,080 --> 00:02:43,300
delete delete todo 2,  delete todo 3.
36

37
00:02:43,300 --> 00:02:43,720
That's cool.
37

38
00:02:43,740 --> 00:02:48,320
So now we are able to execute... to execute the delete method on the right todo.
38

39
00:02:48,430 --> 00:02:50,040
But this is just the UI part.
39

40
00:02:50,040 --> 00:02:52,890
We would actually need to call this service.
40

41
00:02:53,100 --> 00:02:57,460
So we need to enhance the todo.service, so that we can call todo service.
41

42
00:02:57,460 --> 00:02:57,780
Right?
42

43
00:02:57,770 --> 00:02:59,300
So let's create that method.
43

44
00:02:59,490 --> 00:03:03,760
So delete todo the  method accepts two parameters.
44

45
00:03:03,780 --> 00:03:06,960
I use that name comma the ID to be deleted.
45

46
00:03:06,960 --> 00:03:09,540
So let's pass on those two parameters.
46

47
00:03:09,540 --> 00:03:16,270
What we'll do, is do something similar to what we see for the Get method. So this.http.delete.
47

48
00:03:16,290 --> 00:03:19,960
So that's the only difference. This is going to call the delete method.
48

49
00:03:20,040 --> 00:03:22,530
And what is it that you want to call?
49

50
00:03:22,560 --> 00:03:28,390
Let's use the same ticks, and the URL which you would want to call it.
50

51
00:03:28,390 --> 00:03:34,740
Copy it from the restlet client, because that was a successful execution for us.
51

52
00:03:34,740 --> 00:03:35,800
Let's take it from here.
52

53
00:03:37,170 --> 00:03:39,630
So users.... instead of this,
53

54
00:03:39,640 --> 00:03:45,330
It should be ${} username, and instead of todos/1,
54

55
00:03:45,330 --> 00:03:50,180
We need to replace it with {id}. add $.
55

56
00:03:50,640 --> 00:03:52,150
This $ is very very important.
56

57
00:03:52,150 --> 00:03:55,330
We make sure that you have a $ in both these places.
57

58
00:03:55,470 --> 00:03:58,430
So this index is this, and you'd see that it's highlighted.
58

59
00:03:58,590 --> 00:04:03,210
So if I'm making use of the variable in this string, then you'd see that it's highlighted.
59

60
00:04:03,210 --> 00:04:06,770
Now let's go to that list component and enhance this.
60

61
00:04:06,800 --> 00:04:12,870
So what we want to do in here, is we would want to say this. ... this.todo service. delete todo
61

62
00:04:13,140 --> 00:04:14,700
And what are the parameters?
62

63
00:04:14,700 --> 00:04:22,540
User name is the first one. Let's continue hard-coding to in28minutes, and what we want to do the ID is
63

64
00:04:22,810 --> 00:04:29,130
the ID of the todo, we need todo.subscribe which would delete it.
64

65
00:04:29,130 --> 00:04:34,350
Now what could we do when we delete the todo? If the successful response comes back?
65

66
00:04:34,350 --> 00:04:35,420
What should we do?
66

67
00:04:35,490 --> 00:04:42,150
Let's define this right now. So let's do a console.log of response so that we can see what is the
67

68
00:04:42,150 --> 00:04:43,050
response.
68

69
00:04:43,320 --> 00:04:49,270
And ideally it would show a message to the user, that delet todo has been successful.
69

70
00:04:49,570 --> 00:04:59,190
What I'll do is create a simple message string, and here in the list-todos component the statement
70

71
00:04:59,400 --> 00:05:00,260
below the header.
71

72
00:05:00,420 --> 00:05:09,020
Just like in the login page. We did this already log in component.html. We have a warning in here.
72

73
00:05:09,030 --> 00:05:11,540
So let's do something very similar in here.
73

74
00:05:12,450 --> 00:05:19,740
So what we are doing is alert. We'll say alert some sort of warning when... and if condition would change
74

75
00:05:19,740 --> 00:05:20,640
a little here.
75

76
00:05:20,680 --> 00:05:30,700
What we are looking for the message... if the message exists, show the message at all here in the list-
76

77
00:05:30,700 --> 00:05:31,520
todos component.
77

78
00:05:31,570 --> 00:05:43,380
Let's go ahead and say console.log and this.message is equal to delete... you can also include
78

79
00:05:43,380 --> 00:05:44,330
the ID in.
79

80
00:05:44,340 --> 00:05:55,020
So I'd say tick,  so that you can actually say delete of todo... $ {Id} successful.
80

81
00:05:55,140 --> 00:05:56,170
Let's see what would happen.
81

82
00:05:56,220 --> 00:06:00,020
Let's go back to our UI now.
82

83
00:06:00,080 --> 00:06:01,200
We have to delete.
83

84
00:06:01,360 --> 00:06:04,500
let's clear out the console.
84

85
00:06:04,600 --> 00:06:08,980
clear out the network, and and let's click delete.
85

86
00:06:10,210 --> 00:06:14,560
You can see that it says delete of todo 1 successful.
86

87
00:06:14,770 --> 00:06:15,910
That's cool.
87

88
00:06:16,210 --> 00:06:20,700
One of the things you would see in here, is the fact that we are still seeing three todos.
88

89
00:06:20,770 --> 00:06:23,980
We focus on it a little later, but for now let's look at the content.
89

90
00:06:23,980 --> 00:06:27,230
It says delete todo 1  is sending a response of null,
90

91
00:06:27,300 --> 00:06:28,060
that's OK.
91

92
00:06:28,110 --> 00:06:34,840
And if I expand this further to see the network tab, you'd see that there is a response of todo for coming
92

93
00:06:34,840 --> 00:06:36,500
in with just no content.
93

94
00:06:36,500 --> 00:06:40,520
So localhost:8080 user in28minutes todos/1 DELETE
94

95
00:06:40,600 --> 00:06:41,170
That's cool!
95

96
00:06:41,200 --> 00:06:42,800
So this is all good.
96

97
00:06:43,000 --> 00:06:49,120
And if you go and execute the todos link, you'll see that the ID 1 is deleted.
97

98
00:06:49,120 --> 00:06:49,750
That's perfect.
98

99
00:06:49,750 --> 00:06:54,330
So we are able to delete the todo. the one thing I didn't really like right now is the fact that we
99

100
00:06:54,340 --> 00:06:57,650
are still seeing the complete list of todos.
100

101
00:06:57,670 --> 00:06:58,660
Why is it so?
101

102
00:06:58,720 --> 00:07:01,290
Because we have not really refreshed the todos list.
102

103
00:07:01,360 --> 00:07:07,360
If you see that if actually click to do that again, or actually go to home and come back to todos
103

104
00:07:07,360 --> 00:07:11,390
and do the refresh again, you would see that the todo is actually deleted.
104

105
00:07:11,400 --> 00:07:14,170
So how do we get a refresh page once they are deleted?
105

106
00:07:14,180 --> 00:07:20,980
What other ways would we do? Directly call this method again. So I can copy this code and call this again
106

107
00:07:21,010 --> 00:07:23,890
inside the response. Once the response comes back.
107

108
00:07:23,890 --> 00:07:30,160
I can do the refresh all the todos. But that would be too much, because we would be duplicating a lot
108

109
00:07:30,160 --> 00:07:30,670
of code.
109

110
00:07:30,700 --> 00:07:36,460
So what I do is I'll refactor this to an external method. So what I do is take this logic and actually
110

111
00:07:36,460 --> 00:07:39,160
move it to a method. Instead of ngOnInit,
111

112
00:07:39,350 --> 00:07:45,500
Let's create a method called refresh todos, and put the logic in there.
112

113
00:07:45,650 --> 00:07:56,480
And what we do is on ngOnInit,  let's called refresh todos, 
and we can do the same thing. When we actually
113

114
00:07:57,110 --> 00:08:04,510
do this in. The other things you can actually do, is actually try and play with the todos, and delete the
114

115
00:08:04,510 --> 00:08:07,760
specific ID from the ToDo List, which is present on the client side.
115

116
00:08:07,840 --> 00:08:13,510
I would not recommend, because you would always want to reflect what data is on your server as much as
116

117
00:08:13,510 --> 00:08:15,850
possible, unless you have a huge performance issue.
117

118
00:08:15,880 --> 00:08:20,270
I think invoking the service again, and getting the data again is the better option.
118

119
00:08:20,380 --> 00:08:22,390
Let's look at the thing again.
119

120
00:08:22,430 --> 00:08:23,530
The todos are loaded.
120

121
00:08:23,740 --> 00:08:28,240
You have todos. Click delete, the delete is successful.
121

122
00:08:28,330 --> 00:08:29,480
Cool isn't it.
122

123
00:08:29,530 --> 00:08:36,070
In the last few steps we focused on implementing the delete action, and we have update and the add new
123

124
00:08:36,110 --> 00:08:39,000
todo actions remaining, in the next steps.
124

125
00:08:39,010 --> 00:08:41,510
Let's create the update and the ad todo action.
125

126
00:08:41,530 --> 00:08:42,870
I'll see you in the next step.
126

127
00:08:43,010 --> 00:08:43,400
Until then, Bye!
