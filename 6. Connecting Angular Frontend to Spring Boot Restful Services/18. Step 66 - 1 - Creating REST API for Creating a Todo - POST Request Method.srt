0
1
00:00:01,940 --> 00:00:07,720
Welcome back. In the previous step, we created the mapping request.
1

2
00:00:07,850 --> 00:00:14,420
Let's test it first, before we would go ahead and create the POST mapping. Before we do anything let's do
2

3
00:00:14,420 --> 00:00:20,160
a get, and get the details of specific ideas so let's say todos/1.
3

4
00:00:20,360 --> 00:00:23,420
Make sure that you have the origin 4200 in here.
4

5
00:00:24,260 --> 00:00:28,880
You'd see that the response is 200, and I'm seeing the response back in it.
5

6
00:00:28,940 --> 00:00:34,280
So I copied the body from here, so that we can use it in our request.
6

7
00:00:34,300 --> 00:00:40,090
So I'm changing it to put, and inside the body I'm copying it whatever I've copied from here.
7

8
00:00:40,130 --> 00:00:46,430
What i'll do, is the id 1, I would want to change it and let's say it's learning to dance.
8

9
00:00:46,560 --> 00:00:55,080
Done. And let's try and update it. Let's call send now.
9

10
00:00:55,430 --> 00:00:57,850
You would see I'm getting a 500.
10

11
00:00:57,870 --> 00:01:00,970
It says Type definition error,  simple type.
11

12
00:01:01,120 --> 00:01:02,460
Todo has no creators
12

13
00:01:02,490 --> 00:01:04,020
That's what it says.
13

14
00:01:04,020 --> 00:01:10,110
The reason why you are getting the error, is because todo does not have a default constructor. One
14

15
00:01:10,110 --> 00:01:16,980
of the things is if it wanted to have something as a request body, then you'd need to actually have a
15

16
00:01:17,190 --> 00:01:22,240
default constructor with no arguments, present that would enable creation of this object.
16

17
00:01:22,260 --> 00:01:27,480
And then what are the values in the request application does that does it for them?
17

18
00:01:28,210 --> 00:01:30,830
You could just have some constructor like this.
18

19
00:01:31,000 --> 00:01:33,440
You have to create a default constructor.
19

20
00:01:33,440 --> 00:01:36,530
Now let's go ahead and let's do that request again.
20

21
00:01:36,670 --> 00:01:38,080
Send nothing.
21

22
00:01:38,140 --> 00:01:45,700
You'll see that the execution of the request is successful : it says 200 and we are able to get the content
22

23
00:01:45,700 --> 00:01:46,700
of the request back.
23

24
00:01:46,810 --> 00:01:53,470
And if I go and refresh the in28minutes todos URL,  what we see? learn to dance  , 15.
24

25
00:01:53,470 --> 00:01:54,100
That's cool.
25

26
00:01:54,100 --> 00:01:57,820
So our update request logic is working.
26

27
00:01:58,060 --> 00:02:07,340
Now let's focus on POST request which is used to create a new todo. Copy Put mapping whole thing again.
27

28
00:02:07,540 --> 00:02:11,670
This one we would want to use the POST mapping post mapping.
28

29
00:02:12,040 --> 00:02:18,290
And what I would need to do is the POST mapping? you send the POST. What you would send a todo, you
29

30
00:02:18,290 --> 00:02:20,760
will get an error, because you will not have ID.
30

31
00:02:20,980 --> 00:02:24,100
We need to assign the ID inside the application for it.
31

32
00:02:24,370 --> 00:02:29,960
So let's remove that out, and over here, what we want to do is the save meothod.
32

33
00:02:29,980 --> 00:02:31,730
Let's call Save method, let's call it.
33

34
00:02:31,860 --> 00:02:37,860
However what we want to do for a created resource is the location of the created resource.
34

35
00:02:37,870 --> 00:02:44,530
So what we would typically return for a created post request, is what do you want all of the created
35

36
00:02:44,530 --> 00:02:45,630
resource.
36

37
00:02:45,640 --> 00:02:49,660
So what we can do is we can actually get rid of the current resource.
37

38
00:02:49,690 --> 00:02:53,010
So what we can do is get current resource?
38

39
00:02:53,320 --> 00:03:01,090
So if the URL resource for this one is localhost:8080, it was  in28minutes/ytodos 
39

40
00:03:01,090 --> 00:03:07,320
Now to this I can up the ID, and that would give me the URL of the new resource, which is great.
40

41
00:03:07,330 --> 00:03:13,370
So to this if I can actually append in the ID, then this would give me the complete URL.
41

42
00:03:13,690 --> 00:03:16,260
So lets see how to do that.
42

43
00:03:16,270 --> 00:03:19,510
There is a helper component called ServletsUri
43

44
00:03:19,580 --> 00:03:26,660
Actually it's the ServletUri. Just type in ServletUri, a  component builder that's the component.
44

45
00:03:26,770 --> 00:03:29,710
And inside there are static methods, and you can say.
45

46
00:03:29,940 --> 00:03:37,300
So you have a component builder, and you can say from the current request. but from current request you
46

47
00:03:37,330 --> 00:03:45,670
can request and append this particular thing up... and Id: what I would want to append is the ID of the
47

48
00:03:45,790 --> 00:03:48,470
created resource very quickly.
48

49
00:03:48,510 --> 00:03:55,260
So this is created. The  resource I created to post the created resource to this.
49

50
00:03:55,360 --> 00:04:03,790
The way you can do that is by saying . build and expand and build and expand,  because passing the variable
50

51
00:04:03,790 --> 00:04:04,710
value.
51

52
00:04:04,740 --> 00:04:08,590
So I'll just press enter, so that we can go on to the next line.
52

53
00:04:08,620 --> 00:04:16,880
So what I'll do is I'll pass in the created todo.getId().
53

54
00:04:17,000 --> 00:04:20,490
So the id of the created todo will be replaced.
54

55
00:04:20,610 --> 00:04:23,800
This will be replaced with the id of the created todo.
55

56
00:04:23,970 --> 00:04:31,780
And let's get the URI. Let's get the URI, and I can do one and send it to a local variable so I can
56

57
00:04:31,840 --> 00:04:37,180
this URI, and over here, what we'll do is let's do the static method.
57

58
00:04:37,260 --> 00:04:42,400
I'd want to do  response entity.create() what is created?
58

59
00:04:42,600 --> 00:04:47,460
URI location is created, and . build().
59

60
00:04:47,820 --> 00:04:49,760
Let's quickly review what we have done until now.
60

61
00:04:49,770 --> 00:04:56,000
So we called the Save method, and we got the details of the created todo. The same method if we look
61

62
00:04:56,000 --> 00:04:56,610
at it.
62

63
00:04:56,810 --> 00:04:57,780
What does it do?
63

64
00:04:57,800 --> 00:04:59,010
It checks if it's -1.
64

65
00:04:59,040 --> 00:05:05,910
And if it's -1,  then it's new todo. Actually by default the value of the ID would be equal to
65

66
00:05:05,990 --> 00:05:11,230
zero or -1. I would consider it as if the request is to create a new todo.
66

67
00:05:11,420 --> 00:05:14,710
And what we are doing is zero or -1.
67

68
00:05:14,810 --> 00:05:20,510
We are actually setting the id of what the new todo, So i'm incrementing the counter.
68

69
00:05:20,720 --> 00:05:27,710
And we are adding it to the list of todo's, and what we and at the end we also return that back.
69

70
00:05:27,710 --> 00:05:33,410
So what we do in here, we get the created todo, and what we are doing in here is taking the current request
70

71
00:05:33,410 --> 00:05:36,290
back and appending /id.
71

72
00:05:36,380 --> 00:05:40,940
So we want to add the ID in, and we are creating the resource.
72

73
00:05:40,970 --> 00:05:46,620
So we return a status called created Response Entity, create it,  and passing in the new todo.
73

74
00:05:46,640 --> 00:05:49,900
The URI which is created,  .build()
74

75
00:05:50,330 --> 00:05:59,270
Now if you save this and let's go to the editor and go to the restlet client, we sent a put request with
75

76
00:05:59,270 --> 00:06:00,790
this content.
76

77
00:06:00,860 --> 00:06:07,610
What we do now,  is I would want to create a post, but in the post you should not send the ID in.
77

78
00:06:07,610 --> 00:06:12,760
So in the post we would want to create a new resource. So we don't really know the id of the resource.
78

79
00:06:12,860 --> 00:06:21,710
So I want to create a post request, and I would say learn to ride a bicycle,  Make sure that you have the
79

80
00:06:21,710 --> 00:06:29,380
right origin and the content type set.  Application json,  and location localhost:4200.
80

81
00:06:29,420 --> 00:06:34,220
Now the URL of the post on the other hand is just todos.
81

82
00:06:34,430 --> 00:06:41,930
So user in28minutes.  So check everything here, so POST mapping user in28 minutes todos, and that
82

83
00:06:41,930 --> 00:06:44,920
would be mapped to the user name and the request.
83

84
00:06:45,050 --> 00:06:45,710
Thats cool.
84

85
00:06:45,890 --> 00:06:47,120
Now click send.
85

86
00:06:47,450 --> 00:06:49,110
And let's see what happened.
86

87
00:06:49,150 --> 00:06:50,420
You're getting a request.
87

88
00:06:50,510 --> 00:06:52,180
You are getting a response of.
88

89
00:06:52,280 --> 00:06:54,190
201, and you're getting.
89

90
00:06:54,770 --> 00:06:56,900
URL back as well.
90

91
00:06:56,900 --> 00:07:01,330
The great thing about returning the location URL, is that I can open up a new tab.
91

92
00:07:01,590 --> 00:07:05,030
Yupe in the URL, and I can see the details of the new todo.
92

93
00:07:05,120 --> 00:07:08,510
You can see that it has an ID 4,  and all that stuff as well.
93

94
00:07:08,510 --> 00:07:15,520
Now if you want to create another todo, I can say learn to write learn to drive cars.
94

95
00:07:16,520 --> 00:07:25,150
And let's say send. You can see that it's doing one and not the id that it is five.
95

96
00:07:25,170 --> 00:07:32,440
So if you take this and if you actually put it in here, you would see that it's learned to drive a car
96

97
00:07:32,480 --> 00:07:35,950
and if I the user in28minutes todo,  request.
97

98
00:07:35,980 --> 00:07:38,970
You would see that it's returning five todos back.
98

99
00:07:39,340 --> 00:07:46,030
So what we have done in the last few steps, is implemented the services that you would need for doing
99

100
00:07:46,090 --> 00:07:47,530
the delete.
100

101
00:07:47,550 --> 00:07:53,950
We did the delete, the put and the Post, what we're trying to do in here is we are trying to follow
101

102
00:07:53,950 --> 00:08:01,110
the HTTP standards. The delete method typically returns no content when it's successful.
102

103
00:08:01,330 --> 00:08:10,750
And if it's failing, then it would return not found. The PUT request would return a status of OK with
103

104
00:08:11,110 --> 00:08:17,030
the content of the updated resource and the created resource.
104

105
00:08:17,050 --> 00:08:24,120
When you tried to a POST, what it does is it returns the status as created, and returns the URL
105

106
00:08:24,460 --> 00:08:26,770
of the created resource.
106

107
00:08:26,770 --> 00:08:30,890
These are basically the standards which I used when we create resources.
107

108
00:08:31,150 --> 00:08:38,010
What we have done over the last couple of steps, is to create the resource and update the resource.
108

109
00:08:38,050 --> 00:08:45,160
we want to update the todo, and create todo, so we quickly created these services so that we can focus
109

110
00:08:45,160 --> 00:08:47,560
on the front end in the next few steps.
110

111
00:08:47,560 --> 00:08:49,970
I'll see you in the next step. Until then, bye-bye!
